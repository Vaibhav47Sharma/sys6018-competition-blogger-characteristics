{
  "cells": [
    {
      "metadata": {
        "_uuid": "9d2900fa8cca17fb3cfca7afb7a5447e70d326e4",
        "_execution_state": "idle",
        "trusted": true,
        "scrolled": true
      },
      "cell_type": "code",
      "source": "## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\nlibrary(tm)\nlibrary(SnowballC)\nlibrary(tidytext)",
      "execution_count": 16,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "99a253b2ef9f60a2907e73e43026646dd6d05b46"
      },
      "cell_type": "markdown",
      "source": "### Listing the files"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ff5e35049f0ffa7d28c7d55e0aea2403532cda94"
      },
      "cell_type": "code",
      "source": "cat(list.files(path = \"../input\"))",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": "test.csv train.csv",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "2d64a4adc2a3d857e613a48fcc8d276e1529c692"
      },
      "cell_type": "markdown",
      "source": "### Reading the training file"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8abecac8c21d611d3ab6b1303f31b9398138df8b"
      },
      "cell_type": "code",
      "source": "train <- read_csv('../input/train.csv')",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Parsed with column specification:\ncols(\n  post.id = col_double(),\n  user.id = col_double(),\n  gender = col_character(),\n  topic = col_character(),\n  sign = col_character(),\n  date = col_character(),\n  text = col_character(),\n  age = col_double()\n)\n",
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "2a80c4987ab1672ddd8177a1725c8ac0672247de"
      },
      "cell_type": "markdown",
      "source": "### Topic and signs are taken as factors"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "957a53cadba9234b27dc2a01b59e88b0f780d95b"
      },
      "cell_type": "code",
      "source": "train$topic <- as.factor(train$topic)\ntrain$sign <- as.factor(train$sign)\ntrain$gender <- as.factor(train$gender)",
      "execution_count": 4,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "1a22a53716e1708c017e7840e584b27666b4f7af"
      },
      "cell_type": "markdown",
      "source": "### Extracting the year from dates"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "53d7fc846a5b6142084dd9df3944ebebf4c1b0e1"
      },
      "cell_type": "code",
      "source": "train$date <- format(as.Date(train$date, format = '%d,%B,%Y'), format = '%Y')",
      "execution_count": 5,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "67fc04184583dd068b60d8d8af2a1af384298de3"
      },
      "cell_type": "markdown",
      "source": "### Dropping post.id"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7abaf1ce9e4966e3722e0d4c431c2f9a40602cbc"
      },
      "cell_type": "code",
      "source": "train <- subset(train, select = c(2 : ncol(train)))",
      "execution_count": 6,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "0980e96b609ec3e3778c59a0d92b6ba85a16cc10"
      },
      "cell_type": "markdown",
      "source": "### Train and validation set(75%, 25%)"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "914ac51b0dd4ec1bd38fbadafb54cf6bd14dee14"
      },
      "cell_type": "code",
      "source": "valid.rows <- sample(1:nrow(train), nrow(train)/ 4)\nvalid <- train[valid.rows, ]\ntrain <- train[-valid.rows, ]",
      "execution_count": 7,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "c51ab3a67e893126de017cb0fba26f32ad3d29e2"
      },
      "cell_type": "markdown",
      "source": "### Creating a corpus"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "86befd8a8d4b87f863304969adfbd50922d940de"
      },
      "cell_type": "code",
      "source": "text.corpus <- VCorpus(VectorSource(as.vector(unlist(train$text))))",
      "execution_count": 8,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "5f728be06f875800e1c6b0579a9f945031686d09"
      },
      "cell_type": "markdown",
      "source": "### Cleaning the corpus"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "900fa47aa292e8da10a93513ce610b588c648e1f"
      },
      "cell_type": "code",
      "source": "text.corpus <- tm_map(text.corpus, stripWhitespace)                    # remove extra whitespace\ntext.corpus <- tm_map(text.corpus, removeNumbers)                      # remove numbers\ntext.corpus <- tm_map(text.corpus, removePunctuation)                  # remove punctuation\ntext.corpus <- tm_map(text.corpus, content_transformer(tolower))       # ignore case\ntext.corpus <- tm_map(text.corpus, removeWords, stopwords('english'))  # remove stop words\ntext.corpus <- tm_map(text.corpus, stemDocument)                       # stem all words",
      "execution_count": 9,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "250e373cbe93247e239cc15f1210f626c427c679"
      },
      "cell_type": "markdown",
      "source": "### Making the TF-IDF"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c0c8f299e6aafa818a28e00e2de8e0a47af6b89a"
      },
      "cell_type": "code",
      "source": "text.tfidf <- DocumentTermMatrix(text.corpus, control = list(weighting = weightTfIdf))",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Warning message in weighting(x):\n“empty document(s”",
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "810b41187d33225c5c5a1954cd0ed128d18b55b7"
      },
      "cell_type": "markdown",
      "source": "### Removing empty documents"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "1ed941c2855d1f97b33bf2b2054030455a682707"
      },
      "cell_type": "code",
      "source": "row.sums = apply(text.tfidf, 1, sum)\nblogs = blogs[row.sums > 0]\ntext.tfidf = text.tfidf[row.sums > 0,]",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ERROR",
          "evalue": "Error: cannot allocate vector of size 1817.3 Gb\n",
          "traceback": [
            "Error: cannot allocate vector of size 1817.3 Gb\nTraceback:\n",
            "1. apply(text.tfidf, 1, sum)",
            "2. as.matrix(X)",
            "3. as.matrix.simple_triplet_matrix(X)",
            "4. matrix(vector(typeof(x$v), prod(nr, nc)), nr, nc)",
            "5. vector(typeof(x$v), prod(nr, nc))"
          ]
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "4c14ef9fbb03e55087ce8156abef26f5b2a6857e"
      },
      "cell_type": "code",
      "source": "dataset <- data.frame(tidy(text.tfidf))",
      "execution_count": 17,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "a7caa89c4da712b56b2c6abc0d7195104acd751f"
      },
      "cell_type": "code",
      "source": "saveRDS(text.tfidf,'tfidf.rds')\ntext.tfidf <-  readRDS('tfidf.rds')",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.4.2",
      "file_extension": ".r",
      "codemirror_mode": "r"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}